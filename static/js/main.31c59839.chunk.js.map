{"version":3,"sources":["App.js","hooks.js","reportWebVitals.js","index.js"],"names":["App","useState","color","background","config","setConfig","eventName","handler","element","window","savedHandler","useRef","useEffect","current","addEventListener","eventListener","event","removeEventListener","useEventListener","data","JSON","parse","console","log","parent","postMessage","className","style","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAIe,SAASA,IAAO,IAAD,EACAC,mBAAS,CACnCC,MAAO,MACPC,WAAY,WAHc,mBACrBC,EADqB,KACbC,EADa,KAY5B,OCdK,SAA0BC,EAAWC,GAA4B,IAAnBC,EAAkB,uDAARC,OAEvDC,EAAeC,mBAMrBC,qBAAU,WACRF,EAAaG,QAAUN,IACtB,CAACA,IAEJK,qBACE,WAIE,GADoBJ,GAAWA,EAAQM,iBACvC,CAGA,IAAMC,EAAgB,SAACC,GAAD,OAAWN,EAAaG,QAAQG,IAMtD,OAHAR,EAAQM,iBAAiBR,EAAWS,GAG7B,WACLP,EAAQS,oBAAoBX,EAAWS,OAG3C,CAACT,EAAWE,IDtBdU,CAAiB,WAAW,YAAe,IAAZC,EAAW,EAAXA,KAC7Bd,EAAUe,KAAKC,MAAMF,IACrBG,QAAQC,IAAI,WACZd,OAAOe,OAAOC,YAAY,wBAAyB,QAInD,sBAAKC,UAAU,MAAf,UACE,mDACA,qBAAKC,MAAO,CAAEC,gBAAiBxB,EAAOD,YAAtC,SACE,oBAAIwB,MAAO,CAAEzB,MAAOE,EAAOF,OAA3B,0DEpBR,IAYe2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxC,EAAD,MAEFyC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.31c59839.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useEventListener } from \"./hooks\";\n\n\nexport default function App() {\n  const [config, setConfig] = useState({\n    color: \"red\",\n    background: \"yellow\"\n  });\n\n  useEventListener(\"message\", ({ data }) => {\n    setConfig(JSON.parse(data));\n    console.log(\"running\");\n    window.parent.postMessage(\"updates taken care of\", \"*\");\n  });\n\n  return (\n    <div className=\"App\">\n      <h1>Hello CodeSandbox</h1>\n      <div style={{ backgroundColor: config.background }}>\n        <h2 style={{ color: config.color }}>\n          Start editing to see some magic happen!\n        </h2>\n      </div>\n    </div>\n  );\n}","import { useEffect, useRef } from \"react\";\n// Hook\nexport function useEventListener(eventName, handler, element = window) {\n  // Create a ref that stores handler\n  const savedHandler = useRef();\n\n  // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(\n    () => {\n      // Make sure element supports addEventListener\n      // On\n      const isSupported = element && element.addEventListener;\n      if (!isSupported) return;\n\n      // Create event listener that calls handler function stored in ref\n      const eventListener = (event) => savedHandler.current(event);\n\n      // Add event listener\n      element.addEventListener(eventName, eventListener);\n\n      // Remove event listener on cleanup\n      return () => {\n        element.removeEventListener(eventName, eventListener);\n      };\n    },\n    [eventName, element] // Re-run if eventName or element changes\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}